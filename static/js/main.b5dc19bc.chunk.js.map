{"version":3,"sources":["index.shapes.js","statelessComponents/select/select.presenter.jsx","statelessComponents/checkBox/checkBox.presenter.jsx","components/main/chartContainer/chartControls/chartControls.presenter.jsx","components/main/chartContainer/chartPlaceholder/chartPlaceholder.presenter.jsx","statelessComponents/lineChartWrapper/lineChartWrapper.presenter.jsx","statelessComponents/scatterChartWrapper/scatterChartWrapper.presenter.jsx","statelessComponents/combinedChartWrapper/combinedChartWrapper.jsx","components/main/chartContainer/chartTypeSwitcher/chartTypeSwitcher.presenter.jsx","components/main/chartContainer/chartContainer.presenter.jsx","selector.js","components/main/main.data.helper.js","actionCreators.js","actions.js","components/main/main.container.js","statelessComponents/calendarChartWrapper/calendarChartWrapper.helper.js","statelessComponents/calendarChartWrapper/calendarChartWrapper.presenter.jsx","statelessComponents/heatMapChartWrapper/heatMapChartWrapper.helper.js","statelessComponents/heatMapChartWrapper/heatMapChartWrapper.presenter.jsx","components/aggregateArea/aggregateChart/aggregateChart.presenter.jsx","components/aggregateArea/aggregateControls/aggregateControls.presenter.jsx","components/aggregateArea/aggregatePlaceholder/aggregatePlaceholder.presenter.jsx","components/aggregateArea/eventDetailsArea/selectedEventTable/selectedEventTable.presenter.jsx","components/aggregateArea/eventDetailsArea/dayStatisticsArea/dayStatisticsArea.presenter.jsx","components/aggregateArea/eventDetailsArea/geolocationDisplay/geolocationDisplay.presenter.jsx","components/aggregateArea/eventDetailsArea/eventDetailsArea.presenter.jsx","statelessComponents/multiChartWrapper/multiChartWrapper.presenter.jsx","components/aggregateArea/aggregateArea.container.js","reducer.js","index.js"],"names":["dataTypes","chartTypes","AGGREGATE_CHART_TYPES","ROLLUP_TYPES","timeRangeShape","arrayOf","shape","displayName","string","isRequired","value","dataType","oneOf","0","1","Select","title","areBaselinesVisible","bool","chartType","timeRange","dataSeries","object","options","label","onChange","className","event","selectedValue","target","map","option","key","CheckBox","isChecked","type","name","checked","ChartControls","dataSourceOptions","chartTypeOptions","timeRangeSourceOptions","onDataSourceSelect","onChartTypeSelect","onTimeRangeSourceSelect","onShowBaselines","ChartPlaceholder","baselineStyleLite","line","stroke","strokeWidth","opacity","fill","LineChartWrapper","chartTitle","onSetTimeRange","style","background","borderRadius","borderStyle","borderWidth","borderColor","padding","paddingTop","paddingBottom","enableDragZoom","onTimeRangeChanged","newTimeRange","maxTime","range","end","minTime","begin","width","height","id","min","max","format","axis","series","columns","styler","interpolation","element","toUpperCase","slice","position","visible","ScatterChartWrapper","useState","highlightedElement","setHighlightedElement","color","enablePanZoom","trackerShowTime","highlight","info","get","column","infoHeight","infoWidth","infoStyle","strokeDasharray","box","onMouseNear","newHighlightedElement","CombinedChartWrapper","ChartTypeSwitcher","chart","ChartContainer","createSelector","state","main","Object","keys","charts","filter","moodMappings","rad","excited","good","hopeful","confident","motivated","calm","meh","normal","uneasy","tired","confused","bad","lonely","demotivated","awful","moodGroupMappings","prepareData","preparedSleepData","sleepData","start","sleepQuality","timeInBed","activity","Number","preparedMoodData","data","reverse","mood","moodGroup","activities","split","trim","prepareMoodData","moodData","events","TimeEvent","moment","TimeSeries","convertTimeInBedToTimeSeries","convertStepCountToTimeSeries","convertSleepQualityToTimeSeries","full_date","time","replace","convertMoodDataToTimeSeries","setDataSource","dataSourceOption","chartId","setChartType","chartTypeOption","setTimeRangeSource","timeRangeSourceOption","connect","selector","dispatch","onLoadData","useEffect","find","convertAggregateMoodDataToCalendarFormat","aggregateMoodData","crop","dailyRollup","aggregation","avg","toJSON","points","day","toFixed","CalendarChartWrapper","from","to","emptyColor","colors","margin","top","right","bottom","left","yearSpacing","monthBorderColor","dayBorderWidth","dayBorderColor","monthBorderWidth","legends","anchor","direction","translateY","itemCount","itemWidth","itemHeight","itemsSpacing","itemDirection","heatMapKeysMood","heatMapKeysMoodGroups","DAILY","WEEKLY","MONTHLY","convertAggregateMoodDataToHeatMapFormat","isDetailedView","rollupType","moodDataGroupedByRollupType","dataInTimeRange","groupBy","groupMoodDataByRollupType","groupByMoodInWeekday","weekday","countBy","group","fromEntries","fillInEmptyGroupings","values","HeatMapChartWrapper","setRollupType","setIsDetailedView","capitalize","indexBy","forceSquare","axisTop","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","axisRight","axisBottom","axisLeft","cellOpacity","cellBorderColor","modifiers","labelTextColor","defs","rotation","lineWidth","spacing","animate","motionStiffness","motionDamping","hoverTarget","cellHoverOthersOpacity","HEATMAP_CHART","CALENDAR_CHART","AggregateChart","AggregateControls","AggregatePlaceholder","SelectedEventTable","selectedEventData","row","join","DayStatisticsArea","formattedSelectedEventTime","_","average","selectedDayElement","point","pointDate","Date","getFullYear","getMonth","getDate","valueForSelectedDay","difference","toString","GeolocationDisplay","selectedEventTime","overlay","setOverlay","locationsForSelectedDay","geolocationData","locations","location","parseInt","timestampMs","setHours","getCoordinatesForLocation","latitudeE7","longitudeE7","defaultCenter","Math","floor","length","defaultZoom","provider","x","y","z","index","payload","onClick","offset","timestamp","date","getHours","getMinutes","getFormattedTimeFromTimestamp","EventDetailsArea","toDateString","highlighted","trackerStyle","MultiChartWrapper","leftChart","rightChart","scatterChart","onSelectEventTime","leftDataSeries","renameColumns","renameMap","rightDataSeries","scatterDataSeries","count","axisStyle","radius","onSelectionChange","labelOffset","aggregateChartTypeOptions","aggregate1","classNames","aggregate2","initialState","2","rootReducer","createReducer","actions","action","previousCharts","timeRangeSource","reduce","acc","currentKey","dataElement","timerange","mode","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5dc19bc.chunk.js","sourcesContent":["import {shape, string, arrayOf, oneOf, object, bool} from 'prop-types'\n\nconst dataTypes = {\n  numerical: 'NUMERICAL',\n  categorical: 'CATEGORICAL'\n}\n\nconst chartTypes = {\n  lineChart: 'LINE_CHART',\n  scatterChart: 'SCATTER_CHART',\n  combinedChart: 'COMBINED_CHART'\n}\n\nconst AGGREGATE_CHART_TYPES = {\n  CALENDAR_CHART: 'CALENDAR_CHART',\n  HEATMAP_CHART: 'HEATMAP_CHART'\n}\n\nconst ROLLUP_TYPES = {\n  DAILY: 'DAILY',\n  WEEKLY: 'WEEKLY',\n  MONTHLY: 'MONTHLY'\n}\n\nconst optionsShape = arrayOf(shape({\n  displayName: string.isRequired,\n  value: string.isRequired,\n  dataType: oneOf([dataTypes.numerical, dataTypes.categorical])\n}))\n\nconst timeRangeShape = shape({\n  0: string,\n  1: string\n})\n\nconst chartShape = shape({\n  title: string,\n  areBaselinesVisible: bool,\n  dataType: oneOf([dataTypes.numerical, dataTypes.categorical]),\n  chartType: oneOf([chartTypes.lineChart, chartTypes.scatterChart, chartTypes.combinedChart, AGGREGATE_CHART_TYPES.HEATMAP_CHART, AGGREGATE_CHART_TYPES.CALENDAR_CHART]),\n  timeRange: timeRangeShape,\n  dataSeries: object // TODO: proptypes\n})\n\nexport {optionsShape, timeRangeShape, dataTypes, chartTypes, chartShape, ROLLUP_TYPES, AGGREGATE_CHART_TYPES}\n","import React from 'react'\nimport {func, string} from 'prop-types'\n\nimport {optionsShape} from '../../index.shapes'\n\nconst Select = ({\n  options,\n  label,\n  onChange\n}) => (\n  <div className='select'>\n    <span>{label}</span>\n    <select onChange={event => onChange({selectedValue: event.target.value})}>\n      <option value=''>Please choose</option>\n      {options.map(option => (\n        <option value={option.value} key={option.value}>\n          {option.displayName}\n        </option>\n      ))}\n    </select>\n  </div>\n)\n\nSelect.propTypes = {\n  options: optionsShape.isRequired,\n  label: string.isRequired,\n  onChange: func.isRequired\n}\n\nexport default Select\n","import React from 'react'\nimport {string, bool, func} from 'prop-types'\n\nconst CheckBox = ({\n  label,\n  isChecked,\n  onChange\n}) => (\n  <div className='checkBox'>\n    <span>{label}</span>\n    <input type='checkbox' name={label} onChange={onChange} checked={isChecked} />\n  </div>\n)\n\nCheckBox.propTypes = {\n  label: string.isRequired,\n  isChecked: bool,\n  onChange: func.isRequired\n}\n\nexport default CheckBox\n","import React from 'react'\nimport {func, bool} from 'prop-types'\n\nimport Select from '../../../../statelessComponents/select/select.presenter'\nimport CheckBox from '../../../../statelessComponents/checkBox/checkBox.presenter'\nimport {optionsShape} from '../../../../index.shapes'\n\nconst ChartControls = ({\n  dataSourceOptions,\n  chartTypeOptions,\n  timeRangeSourceOptions,\n  areBaselinesVisible,\n  onDataSourceSelect,\n  onChartTypeSelect,\n  onTimeRangeSourceSelect,\n  onShowBaselines\n}) => (\n  <div className='chartControls'>\n    <Select\n      options={dataSourceOptions}\n      label='Data Source: '\n      onChange={onDataSourceSelect}\n    />\n    <Select\n      options={chartTypeOptions}\n      label='Chart Type: '\n      onChange={onChartTypeSelect}\n    />\n    <Select\n      options={timeRangeSourceOptions}\n      label='Time Range: '\n      onChange={onTimeRangeSourceSelect}\n    />\n    <CheckBox\n      label='Show baselines:'\n      isChecked={areBaselinesVisible}\n      onChange={onShowBaselines}\n    />\n  </div>\n)\n\nChartControls.propTypes = {\n  dataSourceOptions: optionsShape.isRequired,\n  chartTypeOptions: optionsShape.isRequired,\n  timeRangeSourceOptions: optionsShape.isRequired,\n  areBaselinesVisible: bool,\n  onDataSourceSelect: func.isRequired,\n  onChartTypeSelect: func.isRequired,\n  onTimeRangeSourceSelect: func.isRequired,\n  onShowBaselines: func.isRequired\n}\n\nexport default ChartControls\n","import React from 'react'\n\nconst ChartPlaceholder = () => (\n  <div className='chartPlaceholder'>Select chart options</div>\n)\n\nexport default ChartPlaceholder\n","import React from 'react'\nimport {object, string, func, bool} from 'prop-types'\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  LineChart,\n  Baseline,\n  styler\n} from 'react-timeseries-charts'\n\nimport {timeRangeShape} from '../../index.shapes'\n\nconst baselineStyleLite = {\n  line: {\n    stroke: 'steelblue',\n    strokeWidth: 1,\n    opacity: 0.5\n  },\n  label: {\n    fill: 'steelblue'\n  }\n}\n\nconst LineChartWrapper = ({\n  dataSeries,\n  timeRange,\n  chartTitle,\n  areBaselinesVisible,\n  onSetTimeRange\n}) => (\n  <ChartContainer\n    title={chartTitle}\n    style={{\n      background: '#201d1e',\n      borderRadius: 8,\n      borderStyle: 'solid',\n      borderWidth: 1,\n      borderColor: '#232122'\n    }}\n    padding={20}\n    paddingTop={5}\n    paddingBottom={0}\n    enableDragZoom\n    onTimeRangeChanged={newTimeRange => onSetTimeRange({newTimeRange})}\n    timeRange={timeRange}\n    maxTime={dataSeries.range().end()} // FIXME: maybe figure out how to use that\n    minTime={dataSeries.range().begin()}\n    width={500}\n  >\n    <ChartRow height='200'>\n      <YAxis\n        id='value'\n        min={dataSeries.min('value')}\n        max={dataSeries.max('value')}\n        format=',.0f'\n        width='60'\n        type='linear'\n      />\n      <Charts>\n        <LineChart\n          key='value'\n          axis='value'\n          series={dataSeries}\n          columns={['value']}\n          style={styler}\n          interpolation='curveLinear'\n        />\n        {['min', 'max', 'avg'].map(element => (\n          <Baseline\n            axis='value'\n            style={baselineStyleLite}\n            value={dataSeries[element]('value')}\n            label={element[0].toUpperCase() + element.slice(1)}\n            position='right'\n            visible={areBaselinesVisible}\n            key={element}\n          />\n        ))}\n      </Charts>\n      <YAxis\n        id='value'\n        min={dataSeries.min('value')}\n        max={dataSeries.max('value')}\n        format=',.0f'\n        width='60'\n        type='linear'\n      />\n    </ChartRow>\n  </ChartContainer>\n)\n\nLineChartWrapper.propTypes = {\n  dataSeries: object.isRequired, // FIXME:\n  timeRange: timeRangeShape.isRequired,\n  chartTitle: string.isRequired,\n  areBaselinesVisible: bool.isRequired,\n  onSetTimeRange: func.isRequired\n}\n\nexport default LineChartWrapper\n","import React, {useState} from 'react'\nimport {object, string, func, bool} from 'prop-types'\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  ScatterChart,\n  Baseline\n} from 'react-timeseries-charts'\n\nimport {timeRangeShape} from '../../index.shapes'\n\nconst ScatterChartWrapper = ({\n  dataSeries,\n  timeRange,\n  chartTitle,\n  areBaselinesVisible,\n  onSetTimeRange\n}) => {\n  const [highlightedElement, setHighlightedElement] = useState(null)\n\n  const getTrackerValues = () => highlightedElement && [{\n    label: 'Value',\n    value: highlightedElement.event.get(highlightedElement.column)\n  }]\n\n  const trackerStyle = {\n    line: {\n      stroke: 'white',\n      strokeDasharray: 2\n    },\n    box: {\n      fill: 'black'\n    }\n  }\n\n  const baselineStyleLite = {\n    line: {\n      stroke: 'steelblue',\n      strokeWidth: 1,\n      opacity: 0.5\n    },\n    label: {\n      fill: 'steelblue'\n    }\n  }\n\n  return (\n    <ChartContainer\n      title={chartTitle}\n      style={{\n        background: '#201d1e',\n        borderRadius: 8,\n        borderStyle: 'solid',\n        borderWidth: 1,\n        borderColor: '#232122',\n        color: 'red'\n      }}\n      padding={20}\n      paddingTop={5}\n      paddingBottom={0}\n      enableDragZoom\n      enablePanZoom\n      onTimeRangeChanged={newTimeRange => onSetTimeRange({newTimeRange})}\n      timeRange={timeRange}\n      maxTime={dataSeries.range().end()} // FIXME: maybe figure out how to use that\n      minTime={dataSeries.range().begin()}\n      width={500}\n    >\n      <ChartRow\n        height='200'\n        trackerShowTime\n      >\n        <YAxis\n          id='value'\n          min={dataSeries.min('value')}\n          max={dataSeries.max('value')}\n          format=',.0f'\n          width='60'\n          type='linear'\n        />\n        <Charts>\n          <ScatterChart\n            key='value'\n            axis='value'\n            series={dataSeries}\n            columns={['value']}\n            highlight={highlightedElement}\n            info={getTrackerValues()}\n            infoHeight={30}\n            infoWidth={125}\n            infoStyle={trackerStyle}\n            onMouseNear={newHighlightedElement => setHighlightedElement(newHighlightedElement)}\n          />\n          {['min', 'max', 'avg'].map(element => (\n            <Baseline\n              axis='value'\n              style={baselineStyleLite}\n              value={dataSeries[element]('value')}\n              label={element[0].toUpperCase() + element.slice(1)}\n              position='right'\n              visible={areBaselinesVisible}\n              key={element}\n            />\n          ))}\n        </Charts>\n        <YAxis\n          id='value'\n          min={dataSeries.min('value')}\n          max={dataSeries.max('value')}\n          format=',.0f'\n          width='60'\n          type='linear'\n        />\n      </ChartRow>\n    </ChartContainer>\n  )\n}\n\nScatterChartWrapper.propTypes = {\n  dataSeries: object.isRequired, // FIXME:\n  timeRange: timeRangeShape.isRequired,\n  chartTitle: string.isRequired,\n  areBaselinesVisible: bool.isRequired,\n  onSetTimeRange: func.isRequired\n}\n\nexport default ScatterChartWrapper\n","import React, {useState} from 'react'\nimport {object, string, func, bool} from 'prop-types'\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  ScatterChart,\n  LineChart,\n  Baseline\n} from 'react-timeseries-charts'\n\nimport {timeRangeShape} from '../../index.shapes'\n\nconst CombinedChartWrapper = ({\n  dataSeries,\n  timeRange,\n  chartTitle,\n  areBaselinesVisible,\n  onSetTimeRange\n}) => {\n  const [highlightedElement, setHighlightedElement] = useState(null)\n\n  const getTrackerValues = () => highlightedElement && [{\n    label: 'Value',\n    // eslint-disable-next-line prefer-template\n    value: highlightedElement.event.get(highlightedElement.column) + ' '\n  }]\n\n  const trackerStyle = {\n    line: {\n      stroke: 'white',\n      strokeDasharray: 2\n    },\n    box: {\n      fill: 'black'\n    }\n  }\n\n  const baselineStyleLite = {\n    line: {\n      stroke: 'steelblue',\n      strokeWidth: 1,\n      opacity: 0.5\n    },\n    label: {\n      fill: 'steelblue'\n    }\n  }\n\n  return (\n    <ChartContainer\n      title={chartTitle}\n      style={{\n        background: '#201d1e',\n        borderRadius: 8,\n        borderStyle: 'solid',\n        borderWidth: 1,\n        borderColor: '#232122',\n        color: 'red'\n      }}\n      padding={20}\n      paddingTop={5}\n      paddingBottom={0}\n      enableDragZoom\n      enablePanZoom\n      onTimeRangeChanged={newTimeRange => onSetTimeRange({newTimeRange})}\n      timeRange={timeRange}\n      maxTime={dataSeries.range().end()} // FIXME: maybe figure out how to use that\n      minTime={dataSeries.range().begin()}\n      width={500}\n    >\n      <ChartRow\n        height='200'\n        trackerShowTime\n      >\n        <YAxis\n          id='value'\n          min={dataSeries.min('value')}\n          max={dataSeries.max('value')}\n          format=',.0f'\n          width='60'\n          type='linear'\n        />\n        <Charts>\n          <ScatterChart\n            key='value'\n            axis='value'\n            series={dataSeries}\n            columns={['value']}\n            highlight={highlightedElement}\n            info={getTrackerValues()}\n            infoHeight={30}\n            infoWidth={125}\n            infoStyle={trackerStyle}\n            onMouseNear={newHighlightedElement => setHighlightedElement(newHighlightedElement)}\n          />\n          <LineChart\n            key='value'\n            axis='value'\n            series={dataSeries}\n            columns={['value']}\n            interpolation='curveLinear'\n          />\n          {['min', 'max', 'avg'].map(element => (\n            <Baseline\n              axis='value'\n              style={baselineStyleLite}\n              value={dataSeries[element]('value')}\n              label={element[0].toUpperCase() + element.slice(1)}\n              position='right'\n              visible={areBaselinesVisible}\n              key={element}\n            />\n          ))}\n        </Charts>\n        <YAxis\n          id='value'\n          min={dataSeries.min('value')}\n          max={dataSeries.max('value')}\n          format=',.0f'\n          width='60'\n          type='linear'\n        />\n      </ChartRow>\n    </ChartContainer>\n  )\n}\n\nCombinedChartWrapper.propTypes = {\n  dataSeries: object.isRequired, // FIXME:\n  timeRange: timeRangeShape.isRequired,\n  chartTitle: string.isRequired,\n  areBaselinesVisible: bool.isRequired,\n  onSetTimeRange: func.isRequired\n}\n\nexport default CombinedChartWrapper\n","import React from 'react'\nimport {func} from 'prop-types'\n\nimport ChartPlaceholder from '../chartPlaceholder/chartPlaceholder.presenter'\nimport LineChartWrapper from '../../../../statelessComponents/lineChartWrapper/lineChartWrapper.presenter'\nimport ScatterChartWrapper from '../../../../statelessComponents/scatterChartWrapper/scatterChartWrapper.presenter'\nimport CombinedChartWrapper from '../../../../statelessComponents/combinedChartWrapper/combinedChartWrapper'\nimport {chartTypes, chartShape} from '../../../../index.shapes'\n\nconst ChartTypeSwitcher = ({\n  chart,\n  onSetTimeRange\n}) => {\n  switch (chart.chartType) {\n    case chartTypes.lineChart:\n      return (\n        <div className='chartWrapper'>\n          <LineChartWrapper\n            dataSeries={chart.dataSeries}\n            chartTitle={chart.title}\n            timeRange={chart.timeRange}\n            onSetTimeRange={onSetTimeRange}\n            key={chart.id}\n            areBaselinesVisible={chart.areBaselinesVisible}\n          />\n        </div>\n      )\n\n    case chartTypes.scatterChart:\n      return (\n        <div className='chartWrapper'>\n          <ScatterChartWrapper\n            dataSeries={chart.dataSeries}\n            chartTitle={chart.title}\n            timeRange={chart.timeRange}\n            onSetTimeRange={onSetTimeRange}\n            key={chart.id}\n            areBaselinesVisible={chart.areBaselinesVisible}\n          />\n        </div>\n      )\n\n    case chartTypes.combinedChart:\n      return (\n        <div className='chartWrapper'>\n          <CombinedChartWrapper\n            dataSeries={chart.dataSeries}\n            chartTitle={chart.title}\n            timeRange={chart.timeRange}\n            onSetTimeRange={onSetTimeRange}\n            key={chart.id}\n            areBaselinesVisible={chart.areBaselinesVisible}\n          />\n        </div>\n      )\n\n    default:\n      return (\n        <ChartPlaceholder />\n      )\n  }\n}\n\nChartTypeSwitcher.propTypes = {\n  chart: chartShape,\n  onSetTimeRange: func.isRequired\n}\n\nexport default ChartTypeSwitcher\n","import React from 'react'\nimport {func} from 'prop-types'\n\nimport ChartControls from './chartControls/chartControls.presenter'\nimport ChartTypeSwitcher from './chartTypeSwitcher/chartTypeSwitcher.presenter'\nimport {optionsShape, chartShape} from '../../../index.shapes'\n\nconst ChartContainer = ({\n  chart,\n  dataSourceOptions,\n  chartTypeOptions,\n  timeRangeSourceOptions,\n  onDataSourceSelect,\n  onChartTypeSelect,\n  onTimeRangeSourceSelect,\n  onShowBaselines,\n  onSetTimeRange\n}) => (\n  <div className='chartContainer'>\n    <ChartControls\n      dataSourceOptions={dataSourceOptions}\n      chartTypeOptions={chartTypeOptions}\n      timeRangeSourceOptions={timeRangeSourceOptions}\n      areBaselinesVisible={chart.areBaselinesVisible}\n      onDataSourceSelect={onDataSourceSelect}\n      onChartTypeSelect={onChartTypeSelect}\n      onShowBaselines={onShowBaselines}\n      onTimeRangeSourceSelect={onTimeRangeSourceSelect}\n    />\n    <ChartTypeSwitcher\n      chart={chart}\n      onSetTimeRange={onSetTimeRange}\n    />\n  </div>\n)\n\nChartContainer.propTypes = {\n  chart: chartShape,\n  dataSourceOptions: optionsShape.isRequired,\n  chartTypeOptions: optionsShape.isRequired,\n  timeRangeSourceOptions: optionsShape.isRequired,\n  onDataSourceSelect: func.isRequired,\n  onChartTypeSelect: func.isRequired,\n  onTimeRangeSourceSelect: func.isRequired,\n  onShowBaselines: func.isRequired,\n  onSetTimeRange: func.isRequired\n}\n\nexport default ChartContainer\n","import {createSelector} from 'reselect'\n\nconst mainSelector = state => state\n\nexport default createSelector(\n  mainSelector,\n  main => ({\n    ...main,\n    timeRangeSourceOptions: Object.keys(main.charts)\n      .filter(key => main.charts[key].dataType && main.charts[key].chartType)\n      .filter(key => key !== 'aggregate1' && key !== 'aggregate2')\n      .map(key => ({\n        displayName: main.charts[key].title || '',\n        value: key\n      }))\n  })\n)\n","import moment from 'moment'\nimport {TimeSeries, TimeEvent} from 'pondjs'\n\nimport sleepData from '../../data/sleepData.json'\nimport moodData from '../../data/moodData.json'\n\nconst timeFormat = 'YYYY-MM-DD HH:mm:ss'\n\n// const createTimeRange = (beginTime, endTime) => new TimeRange(\n//   moment(beginTime, timeFormat),\n//   moment(endTime, timeFormat)\n// )\n\nconst prepareTimeInBed = timeInBed => Number(timeInBed.split(':')[0]) + Number(timeInBed.split(':')[1]) / 60\nconst prepareSleepQuality = sleepQuality => Number(sleepQuality.slice(0, -1))\n\n// more generic mood ratings\n// const moodMappings = {\n//   rad: 5,\n//   excited: 5,\n//   good: 4,\n//   hopeful: 4,\n//   confident: 4,\n//   motivated: 4,\n//   calm: 4,\n//   meh: 3,\n//   normal: 3,\n//   uneasy: 3,\n//   'putting up a fight': 3,\n//   tired: 3,\n//   confused: 3,\n//   bad: 2,\n//   'emotionally tired': 2,\n//   lonely: 2,\n//   demotivated: 2,\n//   awful: 1,\n//   'emotional hijacking': 1\n// }\n\nconst moodMappings = {\n  rad: 19,\n  excited: 18,\n  good: 17,\n  hopeful: 16,\n  confident: 15,\n  motivated: 14,\n  calm: 13,\n  meh: 12,\n  normal: 11,\n  uneasy: 10,\n  'putting up a fight': 9,\n  tired: 8,\n  confused: 7,\n  bad: 6,\n  'emotionally tired': 5,\n  lonely: 4,\n  demotivated: 3,\n  awful: 2,\n  'emotional hijacking': 1\n}\n\nconst moodGroupMappings = {\n  rad: 'amazing',\n  excited: 'amazing',\n  good: 'good',\n  hopeful: 'good',\n  confident: 'good',\n  motivated: 'good',\n  calm: 'good',\n  meh: 'normal',\n  normal: 'normal',\n  uneasy: 'normal',\n  'putting up a fight': 'normal',\n  tired: 'normal',\n  confused: 'normal',\n  bad: 'bad',\n  'emotionally tired': 'bad',\n  lonely: 'bad',\n  demotivated: 'awful',\n  awful: 'awful',\n  'emotional hijacking': 'awful'\n}\n\nconst prepareSleepData = data =>\n  data.map(element => ({\n    start: element['Start'], // eslint-disable-line dot-notation\n    end: element['End'], // eslint-disable-line dot-notation\n    sleepQuality: element['Sleep quality'],\n    timeInBed: element['Time in bed'],\n    activity: Number(element['Activity (steps)'])\n  }))\n\nconst prepareMoodData = data =>\n  data.reverse().map(element => ({\n    ...element,\n    mood: element.mood,\n    value: moodMappings[element.mood],\n    moodGroup: moodGroupMappings[element.mood],\n    activities: element.activities.split('|').map(value => value.trim())\n  }))\n\nconst convertTimeInBedToTimeSeries = data => {\n  const name = 'Time in Bed'\n  const events = data.map(element => new TimeEvent(\n    moment(element.start),\n    {\n      value: prepareTimeInBed(element.timeInBed)\n    }\n  ))\n\n  return new TimeSeries({name, events})\n}\n\nconst convertStepCountToTimeSeries = data => {\n  const name = 'Step Count'\n  const events = data.map(element => new TimeEvent(\n    moment(element.start),\n    {\n      value: element.activity\n    }\n  ))\n\n  return new TimeSeries({name, events})\n}\n\nconst convertSleepQualityToTimeSeries = data => {\n  const name = 'Sleep Quality (%)'\n  const events = data.map(element => new TimeEvent(\n    moment(element.start),\n    {\n      value: prepareSleepQuality(element.sleepQuality)\n    }\n  ))\n\n  return new TimeSeries({name, events})\n}\n\nconst convertMoodDataToTimeSeries = data => {\n  const name = 'Mood'\n  const events = data.map(element => new TimeEvent(\n    moment(`${element.full_date} ${element.time.replace('.', ':')}`, timeFormat),\n    {\n      ...element\n    }\n  ))\n\n  return new TimeSeries({name, events})\n}\n\nconst prepareData = () => {\n  const preparedSleepData = prepareSleepData(sleepData)\n  const preparedMoodData = prepareMoodData(moodData)\n  const timeInBedTimeSeries = convertTimeInBedToTimeSeries(preparedSleepData)\n  const stepCountTimeSeries = convertStepCountToTimeSeries(preparedSleepData)\n  const sleepQualityTimeSeries = convertSleepQualityToTimeSeries(preparedSleepData)\n  const moodDataTimeSeries = convertMoodDataToTimeSeries(preparedMoodData)\n  return [timeInBedTimeSeries, stepCountTimeSeries, sleepQualityTimeSeries, moodDataTimeSeries]\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport {prepareData}\n","import * as actions from './actions'\n\nexport const setTimeRange = ({newTimeRange, chartId}) => ({\n  type: actions.SET_TIME_RANGE,\n  newTimeRange,\n  chartId\n})\n\nexport const setDataSource = ({dataSourceOption, chartId}) => ({\n  type: actions.SET_DATA_SOURCE,\n  dataSourceOption,\n  chartId\n})\n\nexport const setChartType = ({chartTypeOption, chartId}) => ({\n  type: actions.SET_CHART_TYPE,\n  chartTypeOption,\n  chartId\n})\n\nexport const setTimeRangeSource = ({timeRangeSourceOption, chartId}) => ({\n  type: actions.SET_TIME_RANGE_SOURCE,\n  timeRangeSourceOption,\n  chartId\n})\n\nexport const showBaselines = ({chartId}) => ({\n  type: actions.SHOW_BASELINES,\n  chartId\n})\n\nexport const loadData = ({data}) => ({\n  type: actions.LOAD_DATA,\n  data\n})\n\nexport const selectEventTime = ({selectedEventTime}) => ({\n  type: actions.SELECT_EVENT_TIME,\n  selectedEventTime\n})\n","export const SET_TIME_RANGE = 'SET_TIME_RANGE'\nexport const SET_DATA_SOURCE = 'SET_DATA_SOURCE'\nexport const SET_CHART_TYPE = 'SET_CHART_TYPE'\nexport const SET_TIME_RANGE_SOURCE = 'SET_TIME_RANGE_SOURCE'\nexport const SHOW_BASELINES = 'SHOW_BASELINES'\nexport const LOAD_DATA = 'LOAD_DATA'\nexport const SELECT_EVENT_TIME = 'SELECT_EVENT_TIME'\n","import React, {useEffect} from 'react'\nimport {func, objectOf} from 'prop-types'\nimport {connect} from 'react-redux'\n\nimport ChartContainer from './chartContainer/chartContainer.presenter'\nimport selector from '../../selector'\nimport {prepareData} from './main.data.helper'\nimport {setTimeRange, setDataSource, setChartType, loadData, setTimeRangeSource, showBaselines} from '../../actionCreators'\nimport {optionsShape, chartShape} from '../../index.shapes'\n\nconst Main = ({\n  charts,\n  dataSourceOptions,\n  chartTypeOptions,\n  timeRangeSourceOptions,\n  onSetTimeRange,\n  onDataSourceSelect,\n  onChartTypeSelect,\n  onTimeRangeSourceSelect,\n  onShowBaselines,\n  onLoadData\n}) => {\n  useEffect(() => {\n    onLoadData({data: prepareData()})\n  }, [onLoadData])\n\n  return (\n    <div className='main'>\n      {Object.keys(charts).filter(key => key !== 'aggregate1' && key !== 'aggregate2').map(key => (\n        <ChartContainer\n          key={key}\n          chart={charts[key]}\n          dataSourceOptions={dataSourceOptions}\n          chartTypeOptions={chartTypeOptions}\n          timeRangeSourceOptions={timeRangeSourceOptions}\n          onDataSourceSelect={({selectedValue}) =>\n            onDataSourceSelect({\n              chartId: key,\n              dataSourceOption: dataSourceOptions.find(option => option.value === selectedValue)\n            })}\n          onChartTypeSelect={({selectedValue}) =>\n            onChartTypeSelect({\n              chartId: key,\n              chartTypeOption: chartTypeOptions.find(option => option.value === selectedValue)\n            })}\n          onTimeRangeSourceSelect={({selectedValue}) =>\n            onTimeRangeSourceSelect({\n              chartId: key,\n              timeRangeSourceOption: timeRangeSourceOptions.find(option => option.value === selectedValue)\n            })\n          }\n          onSetTimeRange={({newTimeRange}) => onSetTimeRange({chartId: key, newTimeRange})}\n          onShowBaselines={() => onShowBaselines({chartId: key})}\n        />\n      ))}\n    </div>\n  )\n}\n\nMain.propTypes = {\n  charts: objectOf(chartShape).isRequired,\n  dataSourceOptions: optionsShape.isRequired,\n  chartTypeOptions: optionsShape.isRequired,\n  timeRangeSourceOptions: optionsShape.isRequired,\n  onSetTimeRange: func.isRequired,\n  onDataSourceSelect: func.isRequired,\n  onChartTypeSelect: func.isRequired,\n  onTimeRangeSourceSelect: func.isRequired,\n  onShowBaselines: func.isRequired,\n  onLoadData: func.isRequired\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSetTimeRange: ({newTimeRange, chartId}) => dispatch(setTimeRange({newTimeRange, chartId})),\n  onDataSourceSelect: ({dataSourceOption, chartId}) => dispatch(setDataSource({dataSourceOption, chartId})),\n  onChartTypeSelect: ({chartTypeOption, chartId}) => dispatch(setChartType({chartTypeOption, chartId})),\n  onTimeRangeSourceSelect: ({timeRangeSourceOption, chartId}) => dispatch(setTimeRangeSource({timeRangeSourceOption, chartId})),\n  onShowBaselines: ({chartId}) => dispatch(showBaselines({chartId})),\n  onLoadData: ({data}) => dispatch(loadData({data}))\n})\n\nexport default connect(selector, mapDispatchToProps)(Main)\n","import {avg} from 'pondjs'\n\nexport const convertAggregateMoodDataToCalendarFormat = ({aggregateMoodData}) => {\n  const dataInTimeRange = aggregateMoodData.dataSeries.crop(aggregateMoodData.timeRange)\n  const dataAggregatedByDay = dataInTimeRange.dailyRollup({aggregation: {value: {value: avg()}}}).toJSON().points\n  return dataAggregatedByDay.map(element => ({\n    day: element[0],\n    value: Number(element[1].toFixed(2))\n  }))\n}\n","import React from 'react'\nimport {ResponsiveCalendar} from '@nivo/calendar'\n\nimport {chartShape} from '../../index.shapes'\nimport {convertAggregateMoodDataToCalendarFormat} from './calendarChartWrapper.helper'\n\nconst CalendarChartWrapper = ({chart}) => (\n  <ResponsiveCalendar\n    data={convertAggregateMoodDataToCalendarFormat({aggregateMoodData: chart})}\n    from={chart.timeRange.begin()}\n    to={chart.timeRange.end()}\n    emptyColor='#eeeeee'\n    colors={['#61cdbb', '#97e3d5', '#e8c1a0', '#f47560']}\n    margin={{top: 60, right: 40, bottom: 120, left: 40}}\n    yearSpacing={40}\n    monthBorderColor='#000000'\n    dayBorderWidth={1}\n    dayBorderColor='#000000'\n    monthBorderWidth={1}\n    legends={[\n      {\n        anchor: 'bottom-right',\n        direction: 'row',\n        translateY: 36,\n        itemCount: 4,\n        itemWidth: 42,\n        itemHeight: 36,\n        itemsSpacing: 14,\n        itemDirection: 'right-to-left'\n      }\n    ]}\n  />\n)\n\nCalendarChartWrapper.propTypes = {\n  chart: chartShape.isRequired\n}\n\nexport default CalendarChartWrapper\n","import {groupBy, countBy} from 'lodash'\n\nimport {ROLLUP_TYPES} from '../../index.shapes'\n\nconst heatMapKeysMood = ['rad', 'excited', 'good', 'hopeful', 'confident', 'motivated', 'calm', 'meh', 'normal', 'uneasy', 'putting up a fight', 'tired', 'confused', 'bad', 'emotionally tired', 'lonely', 'demotivated', 'awful', 'emotional hijacking']\nconst heatMapKeysMoodGroups = ['amazing', 'good', 'normal', 'bad', 'awful']\nconst {DAILY, WEEKLY, MONTHLY} = ROLLUP_TYPES\n\n\nconst fillInEmptyGroupings = (group, isDetailedView) =>\n  Object.fromEntries((isDetailedView ? heatMapKeysMood : heatMapKeysMoodGroups)\n    .map(element => [[element], group[element] || 0]))\n\nconst groupMoodDataByRollupType = (dataInTimeRange, rollupType) => {\n  switch (rollupType) {\n    case DAILY:\n      return groupBy(dataInTimeRange.toJSON().points, value => value[2].split(' ')[0])\n    case WEEKLY:\n      return groupBy(dataInTimeRange.toJSON().points, value => value[3])\n    case MONTHLY:\n      return groupBy(dataInTimeRange.toJSON().points, value => value[2].split(' ')[1])\n    default:\n      return null\n  }\n}\n\nexport const convertAggregateMoodDataToHeatMapFormat = ({aggregateMoodData, isDetailedView = false, rollupType}) => {\n  const dataInTimeRange = aggregateMoodData.dataSeries.crop(aggregateMoodData.timeRange)\n  const moodDataGroupedByRollupType = groupMoodDataByRollupType(dataInTimeRange, rollupType)\n  const groupByMoodInWeekday = Object.keys(moodDataGroupedByRollupType)\n    .map(key => ({\n      weekday: key,\n      ...countBy(moodDataGroupedByRollupType[key], value => value[isDetailedView ? 5 : 8])\n    }))\n    .map(group => ({\n      ...group,\n      ...fillInEmptyGroupings(group, isDetailedView)\n    }))\n  const keys = isDetailedView ? heatMapKeysMood : heatMapKeysMoodGroups\n  return {\n    keys,\n    values: groupByMoodInWeekday\n  }\n}\n","import React, {Fragment, useState} from 'react'\nimport {ResponsiveHeatMap} from '@nivo/heatmap'\nimport {capitalize} from 'lodash'\n\nimport Select from '../select/select.presenter'\nimport CheckBox from '../checkBox/checkBox.presenter'\nimport {ROLLUP_TYPES, chartShape} from '../../index.shapes'\nimport {convertAggregateMoodDataToHeatMapFormat} from './heatMapChartWrapper.helper'\n\nconst {DAILY, WEEKLY, MONTHLY} = ROLLUP_TYPES\n\nconst HeatMapChartWrapper = ({chart}) => {\n  const [rollupType, setRollupType] = useState(WEEKLY)\n  const [isDetailedView, setIsDetailedView] = useState(false)\n\n  const data = convertAggregateMoodDataToHeatMapFormat({\n    aggregateMoodData: chart,\n    isDetailedView,\n    rollupType\n  })\n\n  return (\n    <Fragment>\n      <div className='heatMapChartWrapperControls'>\n        <Select\n          options={[DAILY, WEEKLY, MONTHLY].map(element => ({displayName: capitalize(element), value: element}))}\n          label='Rollup Type: '\n          onChange={({selectedValue}) => setRollupType(selectedValue)}\n        />\n        <CheckBox\n          label='Show detailed view:'\n          isChecked={isDetailedView}\n          onChange={() => setIsDetailedView(!isDetailedView)}\n        />\n      </div>\n      <ResponsiveHeatMap\n        data={data.values}\n        keys={data.keys}\n        indexBy='weekday'\n        margin={{top: 60, right: 60, bottom: 100, left: 60}}\n        forceSquare\n        axisTop={{orient: 'top', tickSize: 5, tickPadding: 5, tickRotation: -40, legend: '', legendOffset: 36}}\n        axisRight={null}\n        axisBottom={null}\n        axisLeft={{\n          orient: 'left',\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0\n        }}\n        cellOpacity={1}\n        cellBorderColor={{from: 'color', modifiers: [['darker', 0.4]]}}\n        labelTextColor={{from: 'color', modifiers: [['darker', 1.8]]}}\n        defs={[\n          {\n            id: 'lines',\n            type: 'patternLines',\n            background: 'inherit',\n            color: 'rgba(0, 0, 0, 0.1)',\n            rotation: -45,\n            lineWidth: 4,\n            spacing: 7\n          }\n        ]}\n        fill={[{id: 'lines'}]}\n        animate\n        motionStiffness={80}\n        motionDamping={9}\n        hoverTarget='rowColumn'\n        cellHoverOthersOpacity={0.25}\n      />\n    </Fragment>\n  )\n}\n\nHeatMapChartWrapper.propTypes = {\n  chart: chartShape.isRequired\n}\n\nexport default HeatMapChartWrapper\n","import React from 'react'\n\nimport CalendarChartWrapper from '../../../statelessComponents/calendarChartWrapper/calendarChartWrapper.presenter'\nimport HeatMapChartWrapper from '../../../statelessComponents/heatMapChartWrapper/heatMapChartWrapper.presenter'\nimport {chartShape, AGGREGATE_CHART_TYPES} from '../../../index.shapes'\n\nconst {HEATMAP_CHART, CALENDAR_CHART} = AGGREGATE_CHART_TYPES\n\nconst AggregateChart = ({\n  chart\n}) => {\n  switch (chart.chartType) {\n    case HEATMAP_CHART:\n      return (\n        <div className='aggregateChart'>\n          <HeatMapChartWrapper chart={chart} />\n        </div>\n      )\n    case CALENDAR_CHART:\n      return (\n        <div className='aggregateChart'>\n          <CalendarChartWrapper chart={chart} />\n        </div>\n      )\n    default:\n      return null\n  }\n}\n\nAggregateChart.propTypes = {\n  chart: chartShape\n}\n\nexport default AggregateChart\n","import React from 'react'\nimport {func} from 'prop-types'\n\nimport Select from '../../../statelessComponents/select/select.presenter'\nimport {optionsShape} from '../../../index.shapes'\n\nconst AggregateControls = ({\n  timeRangeSourceOptions,\n  onTimeRangeSourceSelect\n}) => (\n  <div className='aggregateControls'>\n    <div className='topRow'>\n      <Select\n        options={timeRangeSourceOptions}\n        label='Time Range: '\n        onChange={({selectedValue}) => {\n          onTimeRangeSourceSelect({\n            chartId: 'aggregate1',\n            timeRangeSourceOption: timeRangeSourceOptions.find(option => option.value === selectedValue)\n          })\n          onTimeRangeSourceSelect({\n            chartId: 'aggregate2',\n            timeRangeSourceOption: timeRangeSourceOptions.find(option => option.value === selectedValue)\n          })\n        }}\n      />\n    </div>\n  </div>\n)\n\nAggregateControls.propTypes = {\n  timeRangeSourceOptions: optionsShape.isRequired,\n  onTimeRangeSourceSelect: func.isRequired\n}\n\nexport default AggregateControls\n","import React from 'react'\n\nconst AggregatePlaceholder = () => (\n  <div className='aggregatePlaceholder'>Select charts in Inspector Area </div>\n)\n\nexport default AggregatePlaceholder\n","import React from 'react'\nimport {array} from 'prop-types'\n\nconst SelectedEventTable = ({selectedEventData}) => (\n  <div className='selectedEventTable'>\n    <div className='headers'>\n      <div>Time</div>\n      <div>Mood</div>\n      <div>Activities</div>\n    </div>\n    {selectedEventData.map(row => (\n      <div key={row[0]} className='row'>\n        <div>{row[4]}</div>\n        <div>{row[5]}</div>\n        <div>{row[6].join(' | ')}</div>\n      </div>\n    ))}\n  </div>\n)\n\nSelectedEventTable.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  selectedEventData: array.isRequired\n}\n\nexport default SelectedEventTable\n","import React from 'react'\nimport {object, arrayOf, string} from 'prop-types'\n\nconst DayStatisticsArea = ({formattedSelectedEventTime, data}) => {\n  const findElement = points => points.filter(point => {\n    const pointDate = new Date(point[0])\n    const formattedDate = `${pointDate.getFullYear()}-${pointDate.getMonth() + 1}-${pointDate.getDate()}`\n    return formattedDate === formattedSelectedEventTime\n  })[0]\n\n  return (\n    <div className='dayStatisticsArea'>\n      {data.filter(_ => _.name() !== 'Mood').map(element => {\n        const average = element.avg().toFixed(2)\n        const selectedDayElement = findElement(element.toJSON().points)\n        const valueForSelectedDay = selectedDayElement && selectedDayElement[1].toFixed(3)\n        const difference = valueForSelectedDay && ((valueForSelectedDay - average) / average * 100).toFixed(2)\n\n        return selectedDayElement ? (\n          <div key={element.name()} className='dayStatisticsRow'>\n            <div>\n              <span>{`Your ${element.name()} was `}</span>\n              <span className='value'>{`${valueForSelectedDay}`}</span>\n            </div>\n            <div>\n              <span>which is</span>\n              <span className={`difference ${difference > 0 ? 'positive' : 'negative'}`}>{` ${difference.toString().replace('-', '')}% ${difference > 0 ? 'higher' : 'lower'}`}</span>\n            </div>\n            <div>\n              <span>than the average (</span>\n              <span className='average'>{`${average})`}</span>\n            </div>\n          </div>\n        ) : <div className='dayStatisticsRow'>{`No ${element.name()} data for selected day`}</div>\n      })}\n    </div>\n  )\n}\nDayStatisticsArea.propTypes = {\n  formattedSelectedEventTime: string.isRequired,\n  data: arrayOf(object).isRequired\n}\n\nexport default DayStatisticsArea\n","import React, {useState} from 'react'\nimport {instanceOf} from 'prop-types'\nimport Map from 'pigeon-maps'\nimport Marker from 'pigeon-marker'\nimport Overlay from 'pigeon-overlay'\n\nimport geolocationData from '../../../../data/locationData.json'\n\nconst GeolocationDisplay = ({selectedEventTime}) => {\n  const [overlay, setOverlay] = useState(null)\n\n  const locationsForSelectedDay = geolocationData.locations.filter(location =>\n    new Date(parseInt(location.timestampMs, 10)).setHours(0, 0, 0, 0) === selectedEventTime.setHours(0, 0, 0, 0))\n\n  // eslint-disable-next-line id-length\n  const mapTilerProvider = (x, y, z) => `https://api.maptiler.com/maps/streets/${z}/${x}/${y}.png?key=ZfN84VoddPEHGTdMW1xw`\n\n  const getCoordinatesForLocation = location => [location.latitudeE7 / 10000000, location.longitudeE7 / 10000000]\n\n  const getFormattedTimeFromTimestamp = timestamp => {\n    const date = new Date(parseInt(timestamp, 10))\n    return `${date.getHours()}:${date.getMinutes()}`\n  }\n\n  return (\n    <div className='geolocationDisplay'>\n      <div className='geolocationHeader'>\n        Your location history\n      </div>\n      <Map\n        defaultCenter={getCoordinatesForLocation(locationsForSelectedDay[Math.floor(locationsForSelectedDay.length / 2)])}\n        defaultZoom={12}\n        provider={mapTilerProvider}\n      >\n        {locationsForSelectedDay.map((location, index) => (\n          <Marker\n            key={location.timestampMs}\n            anchor={getCoordinatesForLocation(location)}\n            payload={index}\n            onClick={() => setOverlay(location)}\n          />\n        ))}\n        {overlay && (\n          <Overlay\n            anchor={getCoordinatesForLocation(overlay)}\n            offset={[-30, 30]}\n          >\n            <div className='markerOverlay'>\n              {getFormattedTimeFromTimestamp(overlay.timestampMs)}\n            </div>\n          </Overlay>\n        )}\n      </Map>\n    </div>\n  )\n}\n\nGeolocationDisplay.propTypes = {\n  selectedEventTime: instanceOf(Date).isRequired\n}\n\nexport default GeolocationDisplay\n","import React, {Fragment} from 'react'\nimport {instanceOf, object, arrayOf} from 'prop-types'\n\nimport SelectedEventTable from './selectedEventTable/selectedEventTable.presenter'\nimport DayStatisticsArea from './dayStatisticsArea/dayStatisticsArea.presenter'\nimport GeolocationDisplay from './geolocationDisplay/geolocationDisplay.presenter'\n\nconst EventDetailsArea = ({\n  selectedEventTime,\n  data\n}) => {\n  const formattedSelectedEventTime = `${selectedEventTime.getFullYear()}-${selectedEventTime.getMonth() + 1}-${selectedEventTime.getDate()}`\n  const selectedEventData = data[3].toJSON().points.filter(point => point[1] === formattedSelectedEventTime)\n\n  return (\n    <Fragment>\n      <div className='eventDetailsHeader'>\n        <div>Event details for: </div>\n        <div>{new Date(selectedEventTime).toDateString()}</div>\n      </div>\n      <div className='statisticsArea'>\n        <div className='selectedEvent'>\n          <SelectedEventTable selectedEventData={selectedEventData} />\n        </div>\n        <div>\n          <DayStatisticsArea formattedSelectedEventTime={formattedSelectedEventTime} data={data} />\n        </div>\n      </div>\n      <div className='contextualDataArea'>\n        <GeolocationDisplay selectedEventTime={selectedEventTime} />\n      </div>\n    </Fragment>\n  )\n}\n\nEventDetailsArea.propTypes = {\n  selectedEventTime: instanceOf(Date).isRequired,\n  data: arrayOf(object)\n}\n\nexport default EventDetailsArea\n","import React, {useState} from 'react'\nimport {func} from 'prop-types'\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  LineChart,\n  ScatterChart,\n  styler\n} from 'react-timeseries-charts'\nimport {avg, count} from 'pondjs'\n\nimport {chartShape} from '../../index.shapes'\n\nconst style = styler([\n  {key: 'left', color: '#CA4040'},\n  {key: 'right', color: '#9467bd'},\n  {key: 'value', color: '#CC862A', highlighted: '#ffffff'}\n])\n\nconst trackerStyle = {\n  line: {\n    stroke: 'white',\n    strokeDasharray: 2\n  },\n  box: {\n    fill: 'black'\n  }\n}\n\nconst MultiChartWrapper = ({\n  leftChart,\n  rightChart,\n  scatterChart,\n  onSelectEventTime\n}) => {\n  const [highlightedElement, setHighlightedElement] = useState(null)\n\n  const leftDataSeries = leftChart.dataSeries.renameColumns({renameMap: {value: 'left'}})\n  const rightDataSeries = rightChart.dataSeries.renameColumns({renameMap: {value: 'right'}})\n  const scatterDataSeries = scatterChart.dataSeries.dailyRollup({aggregation: {value: {value: avg()}, count: {value: count()}}})\n\n  const getTrackerValues = () => highlightedElement && [{\n    label: 'Average mood: ',\n    // eslint-disable-next-line prefer-template\n    value: highlightedElement.event.get(highlightedElement.column) + ''\n  }]\n\n  return (\n    <ChartContainer\n      style={{\n        background: '#201d1e',\n        borderRadius: 8,\n        borderStyle: 'solid',\n        borderWidth: 1,\n        borderColor: '#232122'\n      }}\n      padding={20}\n      paddingTop={5}\n      paddingBottom={0}\n      timeRange={leftChart.timeRange}\n      maxTime={leftDataSeries.range().end()}\n      minTime={leftDataSeries.range().begin()}\n      width={1040}\n    >\n      <ChartRow\n        height='200'\n        trackerShowTime\n      >\n        <YAxis\n          id='left'\n          axis='left'\n          label={leftChart.title}\n          min={leftDataSeries.min('left')}\n          max={leftDataSeries.max('left')}\n          format=',.0f'\n          width='80'\n          type='linear'\n          style={style.axisStyle('left')}\n        />\n        <Charts>\n          <ScatterChart\n            key='left'\n            axis='left'\n            series={leftDataSeries}\n            columns={['left']}\n            style={style}\n          />\n          <LineChart\n            axis='left'\n            series={leftDataSeries}\n            columns={['left']}\n            style={style}\n            interpolation='curveLinear'\n          />\n\n          <ScatterChart\n            key='right'\n            axis='right'\n            series={rightDataSeries}\n            columns={['right']}\n            style={style}\n          />\n          <LineChart\n            axis='right'\n            series={rightDataSeries}\n            columns={['right']}\n            style={style}\n            interpolation='curveLinear'\n          />\n\n          <ScatterChart\n            axis='value'\n            series={scatterDataSeries}\n            columns={['value']}\n            style={style}\n            radius={event => 1.5 * event.get('count')}\n            highlight={highlightedElement}\n            info={getTrackerValues()}\n            infoHeight={30}\n            infoWidth={125}\n            infoStyle={trackerStyle}\n            onMouseNear={newHighlightedElement => setHighlightedElement(newHighlightedElement)}\n            onSelectionChange={({event}) => onSelectEventTime({selectedEventTime: event.timestamp()})}\n          />\n        </Charts>\n        <YAxis\n          id='right'\n          axis='right'\n          label={rightChart.title}\n          min={rightDataSeries.min('right')}\n          max={rightDataSeries.max('right')}\n          format=',.0f'\n          width='80'\n          type='linear'\n          labelOffset={10}\n          style={style.axisStyle('right')}\n        />\n        <YAxis\n          id='value'\n          axis='value'\n          label={scatterChart.title}\n          min={scatterDataSeries.min('value')}\n          max={scatterDataSeries.max('value')}\n          format=',.0f'\n          width='80'\n          type='linear'\n          style={style.axisStyle('value')}\n        />\n      </ChartRow>\n    </ChartContainer>\n  )\n}\n\nMultiChartWrapper.propTypes = {\n  leftChart: chartShape.isRequired,\n  rightChart: chartShape.isRequired,\n  scatterChart: chartShape.isRequired,\n  onSelectEventTime: func.isRequired\n}\n\nexport default MultiChartWrapper\n","import React, {useEffect} from 'react'\nimport {objectOf, func, instanceOf, object, arrayOf} from 'prop-types'\nimport {connect} from 'react-redux'\n\nimport AggregateChart from './aggregateChart/aggregateChart.presenter'\nimport AggregateControls from './aggregateControls/aggregateControls.presenter'\nimport AggregatePlaceholder from './aggregatePlaceholder/aggregatePlaceholder.presenter'\nimport EventDetailsArea from './eventDetailsArea/eventDetailsArea.presenter'\nimport MultiChartWrapper from '../../statelessComponents/multiChartWrapper/multiChartWrapper.presenter'\nimport {setDataSource, setChartType, setTimeRangeSource, selectEventTime} from '../../actionCreators'\nimport selector from '../../selector'\nimport {chartShape, optionsShape} from '../../index.shapes'\n\nconst AggregateArea = ({\n  selectedEventTime,\n  charts,\n  data,\n  aggregateChartTypeOptions,\n  timeRangeSourceOptions,\n  dataSourceOptions,\n  onDataSourceSelect,\n  onChartTypeSelect,\n  onTimeRangeSourceSelect,\n  onSelectEventTime\n}) => {\n  useEffect(() => {\n    onDataSourceSelect({\n      dataSourceOption: dataSourceOptions.filter(option => option.value === 'Mood')[0],\n      chartId: 'aggregate1'\n    })\n    onChartTypeSelect({\n      chartTypeOption: aggregateChartTypeOptions[0],\n      chartId: 'aggregate1'\n    })\n    onDataSourceSelect({\n      dataSourceOption: dataSourceOptions.filter(option => option.value === 'Mood')[0],\n      chartId: 'aggregate2'\n    })\n    onChartTypeSelect({\n      chartTypeOption: aggregateChartTypeOptions[1],\n      chartId: 'aggregate2'\n    })\n  }, [dataSourceOptions, onDataSourceSelect])\n\n  return (\n    <div className='aggregateArea'>\n      <div className='aggregateAreaHeader'>Aggregate Data</div>\n      <div className='aggregateAreaSubHeader'>Click the event to see details</div>\n      <div className='multiChart'>\n        {(charts[1]?.chartType && charts[2]?.chartType)\n          ? (\n            <MultiChartWrapper\n              leftChart={charts[1]}\n              rightChart={charts[2]}\n              scatterChart={charts.aggregate1}\n              onSelectEventTime={onSelectEventTime}\n            />\n          )\n          : <AggregatePlaceholder />\n        }\n      </div>\n      <AggregateControls\n        timeRangeSourceOptions={timeRangeSourceOptions}\n        onTimeRangeSourceSelect={onTimeRangeSourceSelect}\n      />\n      <div className='aggregateCharts'>\n        {(charts[1]?.chartType && charts[2]?.chartType) ? (\n          <div>\n            <div className='calendarChartHeader'>The numbers represent the average mood rating for the given day</div>\n            <AggregateChart chart={charts.aggregate1} />\n          </div>\n        ) : <AggregatePlaceholder />}\n        {(charts[1]?.chartType && charts[2]?.chartType) ? (\n          <div>\n            <div classNames='heatMapChartHeader'>The numbers represent the number of readings with given mood ratings</div>\n            <AggregateChart chart={charts.aggregate2} />\n          </div>\n        ) : <AggregatePlaceholder />}\n      </div>\n      {selectedEventTime && <EventDetailsArea selectedEventTime={selectedEventTime} data={data} />}\n    </div>\n  )\n}\n\nAggregateArea.propTypes = {\n  selectedEventTime: instanceOf(Date),\n  charts: objectOf(chartShape).isRequired,\n  data: arrayOf(object),\n  aggregateChartTypeOptions: optionsShape.isRequired,\n  timeRangeSourceOptions: optionsShape.isRequired,\n  dataSourceOptions: optionsShape.isRequired,\n  onDataSourceSelect: func.isRequired,\n  onChartTypeSelect: func.isRequired,\n  onTimeRangeSourceSelect: func.isRequired,\n  onSelectEventTime: func.isRequired\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onDataSourceSelect: ({dataSourceOption, chartId}) => dispatch(setDataSource({dataSourceOption, chartId})),\n  onChartTypeSelect: ({chartTypeOption, chartId}) => dispatch(setChartType({chartTypeOption, chartId})),\n  onTimeRangeSourceSelect: ({timeRangeSourceOption, chartId}) => dispatch(setTimeRangeSource({timeRangeSourceOption, chartId})),\n  onSelectEventTime: ({selectedEventTime}) => dispatch(selectEventTime({selectedEventTime}))\n})\n\nexport default connect(selector, mapDispatchToProps)(AggregateArea)\n","import createReducer from '@agillic/create-reducer'\n\nimport * as actions from './actions'\nimport {dataTypes, chartTypes, AGGREGATE_CHART_TYPES} from './index.shapes'\n\nconst initialState = {\n  selectedEventTime: null,\n  charts: {\n    1: {\n      areBaselinesVisible: false\n    },\n    2: {\n      areBaselinesVisible: false\n    }\n    // 3: {\n    //   areBaselinesVisible: false\n    // },\n    // 4: {\n    //   areBaselinesVisible: false\n    // }\n  },\n  data: [],\n  dataSourceOptions: [\n    {\n      displayName: 'Time in Bed',\n      value: 'Time in Bed',\n      dataType: dataTypes.numerical\n    },\n    {\n      displayName: 'Step Count',\n      value: 'Step Count',\n      dataType: dataTypes.numerical\n    },\n    {\n      displayName: 'Sleep Quality (%)',\n      value: 'Sleep Quality (%)',\n      dataType: dataTypes.numerical\n    },\n    {\n      displayName: 'Mood',\n      value: 'Mood',\n      dataType: dataTypes.numerical\n    },\n    {\n      displayName: 'Mood (Aggregated)',\n      value: 'Mood (Aggregated)',\n      dataType: dataTypes.numerical\n    }\n  ],\n  chartTypeOptions: [\n    {\n      displayName: 'Line Chart',\n      value: chartTypes.lineChart,\n      dataType: dataTypes.numerical\n    },\n    {\n      displayName: 'Scatter Chart',\n      value: chartTypes.scatterChart,\n      dataType: dataTypes.numerical\n    },\n    {\n      displayName: 'Combined Chart',\n      value: chartTypes.combinedChart,\n      dataType: dataTypes.numerical\n    }\n  ],\n  aggregateChartTypeOptions: [\n    {\n      displayName: 'Calendar Chart',\n      value: AGGREGATE_CHART_TYPES.CALENDAR_CHART,\n      dataType: dataTypes.categorical\n    },\n    {\n      displayName: 'HeatMap Chart',\n      value: AGGREGATE_CHART_TYPES.HEATMAP_CHART,\n      dataType: dataTypes.categorical\n    }\n  ]\n}\n\nconst rootReducer = createReducer({\n  initialState,\n  actions: {\n    [actions.LOAD_DATA]: ({action: {data}}) => ({data}),\n    [actions.SET_TIME_RANGE]: ({\n      action: {newTimeRange, chartId},\n      state: {charts: previousCharts}\n    }) => ({\n      charts: {\n        ...previousCharts,\n        [chartId]: {\n          ...previousCharts[chartId],\n          timeRange: newTimeRange\n        },\n        ...Object.keys(previousCharts)\n          .filter(key => previousCharts[key].timeRangeSource === chartId)\n          .reduce((acc, currentKey) => {\n            acc[currentKey] = {\n              ...previousCharts[currentKey],\n              timeRange: newTimeRange\n            }\n            return acc\n          }, {})\n      }\n    }),\n    [actions.SET_DATA_SOURCE]: ({\n      action: {dataSourceOption, chartId},\n      state: {charts: previousCharts, data}\n    }) => ({\n      charts: {\n        ...previousCharts,\n        [chartId]: dataSourceOption ? {\n          ...previousCharts[chartId],\n          dataSeries: data.find(dataElement => dataElement.name() === dataSourceOption.value),\n          timeRange: data.find(dataElement => dataElement.name() === dataSourceOption.value).timerange(),\n          dataType: dataSourceOption.dataType,\n          title: dataSourceOption.displayName\n        } : {\n          areBaselinesVisible: false\n        }\n      }\n    }),\n    [actions.SET_CHART_TYPE]: ({\n      action: {chartTypeOption, chartId},\n      state: {charts: previousCharts}\n    }) => ({\n      charts: {\n        ...previousCharts,\n        [chartId]: {\n          ...previousCharts[chartId],\n          chartType: chartTypeOption.value\n        }\n      }\n    }),\n    [actions.SET_TIME_RANGE_SOURCE]: ({\n      action: {timeRangeSourceOption, chartId},\n      state: {charts: previousCharts}\n    }) => ({\n      charts: {\n        ...previousCharts,\n        [chartId]: {\n          ...previousCharts[chartId],\n          timeRangeSource: timeRangeSourceOption.value,\n          timeRange: Object.keys(previousCharts)\n            .map(key => previousCharts[key])\n            .find(element => element.title === timeRangeSourceOption.displayName)\n            .timeRange\n        }\n      }\n    }),\n    [actions.SHOW_BASELINES]: ({\n      action: {chartId},\n      state: {charts: previousCharts}\n    }) => ({\n      charts: {\n        ...previousCharts,\n        [chartId]: {\n          ...previousCharts[chartId],\n          areBaselinesVisible: !previousCharts[chartId].areBaselinesVisible\n        }\n      }\n    }),\n    [actions.SELECT_EVENT_TIME]: ({\n      action: {selectedEventTime}\n    }) => ({\n      selectedEventTime\n    })\n  },\n  options: {\n    mode: 'setState'\n  }\n})\n\nexport default rootReducer\n","/* eslint-disable function-paren-newline */\nimport React from 'react'\nimport {render} from 'react-dom'\nimport {createStore, compose} from 'redux'\nimport {Provider} from 'react-redux'\nimport Main from './components/main/main.container'\nimport AggregateArea from './components/aggregateArea/aggregateArea.container'\nimport rootReducer from './reducer'\nimport './index.scss'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose // eslint-disable-line no-underscore-dangle\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers()\n)\n\nrender(\n  <Provider store={store}>\n    <div className='header'>Inspector Area</div>\n    <Main />\n    <AggregateArea />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}